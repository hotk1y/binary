/*! smooth-scroll v16.1.2 | (c) 2020 Chris Ferdinandi | MIT License | http://github.com/cferdinandi/smooth-scroll */
window.Element&&!Element.prototype.closest&&(Element.prototype.closest=function(e){var t,n=(this.document||this.ownerDocument).querySelectorAll(e),o=this;do{for(t=n.length;0<=--t&&n.item(t)!==o;);}while(t<0&&(o=o.parentElement));return o}),(function(){if("function"==typeof window.CustomEvent)return;function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}e.prototype=window.Event.prototype,window.CustomEvent=e})(),(function(){for(var r=0,e=["ms","moz","webkit","o"],t=0;t<e.length&&!window.requestAnimationFrame;++t)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(e,t){var n=(new Date).getTime(),o=Math.max(0,16-(n-r)),a=window.setTimeout((function(){e(n+o)}),o);return r=n+o,a}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})})(),(function(e,t){"function"==typeof define&&define.amd?define([],(function(){return t(e)})):"object"==typeof exports?module.exports=t(e):e.SmoothScroll=t(e)})("undefined"!=typeof global?global:"undefined"!=typeof window?window:this,(function(q){"use strict";var I={ignore:"[data-scroll-ignore]",header:null,topOnEmptyHash:!0,speed:500,speedAsDuration:!1,durationMax:null,durationMin:null,clip:!0,offset:0,easing:"easeInOutCubic",customEasing:null,updateURL:!0,popstate:!0,emitEvents:!0},F=function(){var n={};return Array.prototype.forEach.call(arguments,(function(e){for(var t in e){if(!e.hasOwnProperty(t))return;n[t]=e[t]}})),n},r=function(e){"#"===e.charAt(0)&&(e=e.substr(1));for(var t,n=String(e),o=n.length,a=-1,r="",i=n.charCodeAt(0);++a<o;){if(0===(t=n.charCodeAt(a)))throw new InvalidCharacterError("Invalid character: the input contains U+0000.");1<=t&&t<=31||127==t||0===a&&48<=t&&t<=57||1===a&&48<=t&&t<=57&&45===i?r+="\\"+t.toString(16)+" ":r+=128<=t||45===t||95===t||48<=t&&t<=57||65<=t&&t<=90||97<=t&&t<=122?n.charAt(a):"\\"+n.charAt(a)}return"#"+r},L=function(){return Math.max(document.body.scrollHeight,document.documentElement.scrollHeight,document.body.offsetHeight,document.documentElement.offsetHeight,document.body.clientHeight,document.documentElement.clientHeight)},x=function(e){return e?(t=e,parseInt(q.getComputedStyle(t).height,10)+e.offsetTop):0;var t},H=function(e,t,n,o){if(t.emitEvents&&"function"==typeof q.CustomEvent){var a=new CustomEvent(e,{bubbles:!0,detail:{anchor:n,toggle:o}});document.dispatchEvent(a)}};return function(o,e){var A,a,O,C,M={};M.cancelScroll=function(e){cancelAnimationFrame(C),C=null,e||H("scrollCancel",A)},M.animateScroll=function(i,c,e){M.cancelScroll();var s=F(A||I,e||{}),u="[object Number]"===Object.prototype.toString.call(i),t=u||!i.tagName?null:i;if(u||t){var l=q.pageYOffset;s.header&&!O&&(O=document.querySelector(s.header));var n,o,a,m,r,d,f,h,p=x(O),g=u?i:(function(e,t,n,o){var a=0;if(e.offsetParent)for(;a+=e.offsetTop,e=e.offsetParent;);return a=Math.max(a-t-n,0),o&&(a=Math.min(a,L()-q.innerHeight)),a})(t,p,parseInt("function"==typeof s.offset?s.offset(i,c):s.offset,10),s.clip),y=g-l,v=L(),w=0,S=(n=y,a=(o=s).speedAsDuration?o.speed:Math.abs(n/1e3*o.speed),o.durationMax&&a>o.durationMax?o.durationMax:o.durationMin&&a<o.durationMin?o.durationMin:parseInt(a,10)),E=function(e,t){var n,o,a,r=q.pageYOffset;if(e==t||r==t||(l<t&&q.innerHeight+r)>=v)return M.cancelScroll(!0),o=t,a=u,0===(n=i)&&document.body.focus(),a||(n.focus(),document.activeElement!==n&&(n.setAttribute("tabindex","-1"),n.focus(),n.style.outline="none"),q.scrollTo(0,o)),H("scrollStop",s,i,c),!(C=m=null)},b=function(e){var t,n,o;m||(m=e),w+=e-m,d=l+y*(n=r=1<(r=0===S?0:w/S)?1:r,"easeInQuad"===(t=s).easing&&(o=n*n),"easeOutQuad"===t.easing&&(o=n*(2-n)),"easeInOutQuad"===t.easing&&(o=n<.5?2*n*n:(4-2*n)*n-1),"easeInCubic"===t.easing&&(o=n*n*n),"easeOutCubic"===t.easing&&(o=--n*n*n+1),"easeInOutCubic"===t.easing&&(o=n<.5?4*n*n*n:(n-1)*(2*n-2)*(2*n-2)+1),"easeInQuart"===t.easing&&(o=n*n*n*n),"easeOutQuart"===t.easing&&(o=1- --n*n*n*n),"easeInOutQuart"===t.easing&&(o=n<.5?8*n*n*n*n:1-8*--n*n*n*n),"easeInQuint"===t.easing&&(o=n*n*n*n*n),"easeOutQuint"===t.easing&&(o=1+--n*n*n*n*n),"easeInOutQuint"===t.easing&&(o=n<.5?16*n*n*n*n*n:1+16*--n*n*n*n*n),t.customEasing&&(o=t.customEasing(n)),o||n),q.scrollTo(0,Math.floor(d)),E(d,g)||(C=q.requestAnimationFrame(b),m=e)};0===q.pageYOffset&&q.scrollTo(0,0),f=i,h=s,u||history.pushState&&h.updateURL&&history.pushState({smoothScroll:JSON.stringify(h),anchor:f.id},document.title,f===document.documentElement?"#top":"#"+f.id),"matchMedia"in q&&q.matchMedia("(prefers-reduced-motion)").matches?q.scrollTo(0,Math.floor(g)):(H("scrollStart",s,i,c),M.cancelScroll(!0),q.requestAnimationFrame(b))}};var t=function(e){if(!e.defaultPrevented&&!(0!==e.button||e.metaKey||e.ctrlKey||e.shiftKey)&&"closest"in e.target&&(a=e.target.closest(o))&&"a"===a.tagName.toLowerCase()&&!e.target.closest(A.ignore)&&a.hostname===q.location.hostname&&a.pathname===q.location.pathname&&/#/.test(a.href)){var t,n;try{t=r(decodeURIComponent(a.hash))}catch(e){t=r(a.hash)}if("#"===t){if(!A.topOnEmptyHash)return;n=document.documentElement}else n=document.querySelector(t);(n=n||"#top"!==t?n:document.documentElement)&&(e.preventDefault(),(function(e){if(history.replaceState&&e.updateURL&&!history.state){var t=q.location.hash;t=t||"",history.replaceState({smoothScroll:JSON.stringify(e),anchor:t||q.pageYOffset},document.title,t||q.location.href)}})(A),M.animateScroll(n,a))}},n=function(e){if(null!==history.state&&history.state.smoothScroll&&history.state.smoothScroll===JSON.stringify(A)){var t=history.state.anchor;"string"==typeof t&&t&&!(t=document.querySelector(r(history.state.anchor)))||M.animateScroll(t,null,{updateURL:!1})}};M.destroy=function(){A&&(document.removeEventListener("click",t,!1),q.removeEventListener("popstate",n,!1),M.cancelScroll(),C=O=a=A=null)};return (function(){if(!("querySelector"in document&&"addEventListener"in q&&"requestAnimationFrame"in q&&"closest"in q.Element.prototype))throw"Smooth Scroll: This browser does not support the required JavaScript methods and browser APIs.";M.destroy(),A=F(I,e||{}),O=A.header?document.querySelector(A.header):null,document.addEventListener("click",t,!1),A.updateURL&&A.popstate&&q.addEventListener("popstate",n,!1)})(),M}}));
/*!
 * baguetteBox.js
 * @author  feimosi
 * @version %%INJECT_VERSION%%
 * @url https://github.com/feimosi/baguetteBox.js
 */

/* global define, module */

(function (root, factory) {
	'use strict';
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.baguetteBox = factory();
	}
}(this, function () {
	'use strict';

	// SVG shapes used on the buttons
	var leftArrow = '<svg width="44" height="60">' +
		'<polyline points="30 10 10 30 30 50" stroke="rgba(255,255,255,0.5)" stroke-width="4"' +
		'stroke-linecap="butt" fill="none" stroke-linejoin="round"/>' +
		'</svg>',
		rightArrow = '<svg width="44" height="60">' +
			'<polyline points="14 10 34 30 14 50" stroke="rgba(255,255,255,0.5)" stroke-width="4"' +
			'stroke-linecap="butt" fill="none" stroke-linejoin="round"/>' +
			'</svg>',
		closeX = '<svg width="30" height="30">' +
			'<g stroke="rgb(160,160,160)" stroke-width="4">' +
			'<line x1="5" y1="5" x2="25" y2="25"/>' +
			'<line x1="5" y1="25" x2="25" y2="5"/>' +
			'</g></svg>';
	// Global options and their defaults
	var options = {},
		defaults = {
			captions: true,
			buttons: 'auto',
			fullScreen: false,
			noScrollbars: false,
			bodyClass: 'baguetteBox-open',
			titleTag: false,
			async: false,
			preload: 2,
			animation: 'slideIn',
			afterShow: null,
			afterHide: null,
			onChange: null,
			overlayBackgroundColor: 'rgba(0,0,0,.8)'
		};
	// Object containing information about features compatibility
	var supports = {};
	// DOM Elements references
	var overlay, slider, previousButton, nextButton, closeButton;
	// An array with all images in the current gallery
	var currentGallery = [];
	// Current image index inside the slider
	var currentIndex = 0;
	// Visibility of the overlay
	var isOverlayVisible = false;
	// Touch event start position (for slide gesture)
	var touch = {};
	// If set to true ignore touch events because animation was already fired
	var touchFlag = false;
	// Regex pattern to match image files
	var regex = /.+\.(gif|jpe?g|png|webp)/i;
	// Object of all used galleries
	var data = {};
	// Array containing temporary images DOM elements
	var imagesElements = [];
	// The last focused element before opening the overlay
	var documentLastFocus = null;
	var overlayClickHandler = function (event) {
		// Close the overlay when user clicks directly on the background
		if (event.target.id.indexOf('baguette-img') !== -1) {
			hideOverlay();
		}
	};
	var previousButtonClickHandler = function (event) {
		event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true; // eslint-disable-line no-unused-expressions
		showPreviousImage();
	};
	var nextButtonClickHandler = function (event) {
		event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true; // eslint-disable-line no-unused-expressions
		showNextImage();
	};
	var closeButtonClickHandler = function (event) {
		event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true; // eslint-disable-line no-unused-expressions
		hideOverlay();
	};
	var touchstartHandler = function (event) {
		touch.count++;
		if (touch.count > 1) {
			touch.multitouch = true;
		}
		// Save x and y axis position
		touch.startX = event.changedTouches[0].pageX;
		touch.startY = event.changedTouches[0].pageY;
	};
	var touchmoveHandler = function (event) {
		// If action was already triggered or multitouch return
		if (touchFlag || touch.multitouch) {
			return;
		}
		event.preventDefault ? event.preventDefault() : event.returnValue = false; // eslint-disable-line no-unused-expressions
		var touchEvent = event.touches[0] || event.changedTouches[0];
		// Move at least 40 pixels to trigger the action
		if (touchEvent.pageX - touch.startX > 40) {
			touchFlag = true;
			showPreviousImage();
		} else if (touchEvent.pageX - touch.startX < -40) {
			touchFlag = true;
			showNextImage();
			// Move 100 pixels up to close the overlay
		} else if (touch.startY - touchEvent.pageY > 100) {
			hideOverlay();
		}
	};
	var touchendHandler = function () {
		touch.count--;
		if (touch.count <= 0) {
			touch.multitouch = false;
		}
		touchFlag = false;
	};
	var contextmenuHandler = function () {
		touchendHandler();
	};

	var trapFocusInsideOverlay = function (event) {
		if (overlay.style.display === 'block' && (overlay.contains && !overlay.contains(event.target))) {
			event.stopPropagation();
			initFocus();
		}
	};

	// forEach polyfill for IE8
	// http://stackoverflow.com/a/14827443/1077846
	/* eslint-disable */
	if (![].forEach) {
		Array.prototype.forEach = function (callback, thisArg) {
			for (var i = 0; i < this.length; i++) {
				callback.call(thisArg, this[i], i, this);
			}
		};
	}

	// filter polyfill for IE8
	// https://gist.github.com/eliperelman/1031656
	if (![].filter) {
		Array.prototype.filter = function (a, b, c, d, e) {
			c = this;
			d = [];
			for (e = 0; e < c.length; e++)
				a.call(b, c[e], e, c) && d.push(c[e]);
			return d;
		};
	}
	/* eslint-enable */

	// Script entry point
	function run(selector, userOptions) {
		// Fill supports object
		supports.transforms = testTransformsSupport();
		supports.svg = testSvgSupport();
		supports.passiveEvents = testPassiveEventsSupport();

		buildOverlay();
		removeFromCache(selector);
		return bindImageClickListeners(selector, userOptions);
	}

	function bindImageClickListeners(selector, userOptions) {
		// For each gallery bind a click event to every image inside it
		var galleryNodeList = document.querySelectorAll(selector);
		var selectorData = {
			galleries: [],
			nodeList: galleryNodeList
		};
		data[selector] = selectorData;

		[].forEach.call(galleryNodeList, function (galleryElement) {
			if (userOptions && userOptions.filter) {
				regex = userOptions.filter;
			}

			// Get nodes from gallery elements or single-element galleries
			var tagsNodeList = [];
			if (galleryElement.tagName === 'A') {
				tagsNodeList = [galleryElement];
			} else {
				tagsNodeList = galleryElement.getElementsByTagName('a');
			}

			// Filter 'a' elements from those not linking to images
			tagsNodeList = [].filter.call(tagsNodeList, function (element) {
				if (element.className.indexOf(userOptions && userOptions.ignoreClass) === -1) {
					return regex.test(element.href);
				}
			});
			if (tagsNodeList.length === 0) {
				return;
			}

			var gallery = [];
			[].forEach.call(tagsNodeList, function (imageElement, imageIndex) {
				var imageElementClickHandler = function (event) {
					event.preventDefault ? event.preventDefault() : event.returnValue = false; // eslint-disable-line no-unused-expressions
					prepareOverlay(gallery, userOptions);
					showOverlay(imageIndex);
				};
				var imageItem = {
					eventHandler: imageElementClickHandler,
					imageElement: imageElement
				};
				bind(imageElement, 'click', imageElementClickHandler);
				gallery.push(imageItem);
			});
			selectorData.galleries.push(gallery);
		});

		return selectorData.galleries;
	}

	function clearCachedData() {
		for (var selector in data) {
			if (data.hasOwnProperty(selector)) {
				removeFromCache(selector);
			}
		}
	}

	function removeFromCache(selector) {
		if (!data.hasOwnProperty(selector)) {
			return;
		}
		var galleries = data[selector].galleries;
		[].forEach.call(galleries, function (gallery) {
			[].forEach.call(gallery, function (imageItem) {
				unbind(imageItem.imageElement, 'click', imageItem.eventHandler);
			});

			if (currentGallery === gallery) {
				currentGallery = [];
			}
		});

		delete data[selector];
	}

	function buildOverlay() {
		overlay = getByID('baguetteBox-overlay');
		// Check if the overlay already exists
		if (overlay) {
			slider = getByID('baguetteBox-slider');
			previousButton = getByID('previous-button');
			nextButton = getByID('next-button');
			closeButton = getByID('close-button');
			return;
		}
		// Create overlay element
		overlay = create('div');
		overlay.setAttribute('role', 'dialog');
		overlay.id = 'baguetteBox-overlay';
		document.getElementsByTagName('body')[0].appendChild(overlay);
		// Create gallery slider element
		slider = create('div');
		slider.id = 'baguetteBox-slider';
		overlay.appendChild(slider);
		// Create all necessary buttons
		previousButton = create('button');
		previousButton.setAttribute('type', 'button');
		previousButton.id = 'previous-button';
		previousButton.setAttribute('aria-label', 'Previous');
		previousButton.innerHTML = supports.svg ? leftArrow : '&lt;';
		overlay.appendChild(previousButton);

		nextButton = create('button');
		nextButton.setAttribute('type', 'button');
		nextButton.id = 'next-button';
		nextButton.setAttribute('aria-label', 'Next');
		nextButton.innerHTML = supports.svg ? rightArrow : '&gt;';
		overlay.appendChild(nextButton);

		closeButton = create('button');
		closeButton.setAttribute('type', 'button');
		closeButton.id = 'close-button';
		closeButton.setAttribute('aria-label', 'Close');
		closeButton.innerHTML = supports.svg ? closeX : '&times;';
		overlay.appendChild(closeButton);

		previousButton.className = nextButton.className = closeButton.className = 'baguetteBox-button';

		bindEvents();
	}

	function keyDownHandler(event) {
		switch (event.keyCode) {
			case 37: // Left arrow
				showPreviousImage();
				break;
			case 39: // Right arrow
				showNextImage();
				break;
			case 27: // Esc
				hideOverlay();
				break;
			case 36: // Home
				showFirstImage(event);
				break;
			case 35: // End
				showLastImage(event);
				break;
		}
	}

	function bindEvents() {
		var options = supports.passiveEvents ? { passive: true } : null;
		bind(overlay, 'click', overlayClickHandler);
		bind(previousButton, 'click', previousButtonClickHandler);
		bind(nextButton, 'click', nextButtonClickHandler);
		bind(closeButton, 'click', closeButtonClickHandler);
		bind(slider, 'contextmenu', contextmenuHandler);
		bind(overlay, 'touchstart', touchstartHandler, options);
		bind(overlay, 'touchmove', touchmoveHandler, options);
		bind(overlay, 'touchend', touchendHandler);
		bind(document, 'focus', trapFocusInsideOverlay, true);
	}

	function unbindEvents() {
		var options = supports.passiveEvents ? { passive: true } : null;
		unbind(overlay, 'click', overlayClickHandler);
		unbind(previousButton, 'click', previousButtonClickHandler);
		unbind(nextButton, 'click', nextButtonClickHandler);
		unbind(closeButton, 'click', closeButtonClickHandler);
		unbind(slider, 'contextmenu', contextmenuHandler);
		unbind(overlay, 'touchstart', touchstartHandler, options);
		unbind(overlay, 'touchmove', touchmoveHandler, options);
		unbind(overlay, 'touchend', touchendHandler);
		unbind(document, 'focus', trapFocusInsideOverlay, true);
	}

	function prepareOverlay(gallery, userOptions) {
		// If the same gallery is being opened prevent from loading it once again
		if (currentGallery === gallery) {
			return;
		}
		currentGallery = gallery;
		// Update gallery specific options
		setOptions(userOptions);
		// Empty slider of previous contents (more effective than .innerHTML = "")
		while (slider.firstChild) {
			slider.removeChild(slider.firstChild);
		}
		imagesElements.length = 0;

		var imagesFiguresIds = [];
		var imagesCaptionsIds = [];
		// Prepare and append images containers and populate figure and captions IDs arrays
		for (var i = 0, fullImage; i < gallery.length; i++) {
			fullImage = create('div');
			fullImage.className = 'full-image';
			fullImage.id = 'baguette-img-' + i;
			imagesElements.push(fullImage);

			imagesFiguresIds.push('baguetteBox-figure-' + i);
			imagesCaptionsIds.push('baguetteBox-figcaption-' + i);
			slider.appendChild(imagesElements[i]);
		}
		overlay.setAttribute('aria-labelledby', imagesFiguresIds.join(' '));
		overlay.setAttribute('aria-describedby', imagesCaptionsIds.join(' '));
	}

	function setOptions(newOptions) {
		if (!newOptions) {
			newOptions = {};
		}
		// Fill options object
		for (var item in defaults) {
			options[item] = defaults[item];
			if (typeof newOptions[item] !== 'undefined') {
				options[item] = newOptions[item];
			}
		}
		/* Apply new options */
		// Change transition for proper animation
		slider.style.transition = slider.style.webkitTransition = (options.animation === 'fadeIn' ? 'opacity .4s ease' :
			options.animation === 'slideIn' ? '' : 'none');
		// Hide buttons if necessary
		if (options.buttons === 'auto' && ('ontouchstart' in window || currentGallery.length === 1)) {
			options.buttons = false;
		}
		// Set buttons style to hide or display them
		previousButton.style.display = nextButton.style.display = (options.buttons ? '' : 'none');
		// Set overlay color
		try {
			overlay.style.backgroundColor = options.overlayBackgroundColor;
		} catch (e) {
			// Silence the error and continue
		}
	}

	function showOverlay(chosenImageIndex) {
		if (options.noScrollbars) {
			document.documentElement.style.overflowY = 'hidden';
			document.body.style.overflowY = 'scroll';
		}
		if (overlay.style.display === 'block') {
			return;
		}

		bind(document, 'keydown', keyDownHandler);
		currentIndex = chosenImageIndex;
		touch = {
			count: 0,
			startX: null,
			startY: null
		};
		loadImage(currentIndex, function () {
			preloadNext(currentIndex);
			preloadPrev(currentIndex);
		});

		updateOffset();
		overlay.style.display = 'block';
		if (options.fullScreen) {
			enterFullScreen();
		}
		// Fade in overlay
		setTimeout(function () {
			overlay.className = 'visible';
			if (options.bodyClass && document.body.classList) {
				document.body.classList.add(options.bodyClass);
			}
			if (options.afterShow) {
				options.afterShow();
			}
		}, 50);
		if (options.onChange) {
			options.onChange(currentIndex, imagesElements.length);
		}
		documentLastFocus = document.activeElement;
		initFocus();
		isOverlayVisible = true;
	}

	function initFocus() {
		if (options.buttons) {
			previousButton.focus();
		} else {
			closeButton.focus();
		}
	}

	function enterFullScreen() {
		if (overlay.requestFullscreen) {
			overlay.requestFullscreen();
		} else if (overlay.webkitRequestFullscreen) {
			overlay.webkitRequestFullscreen();
		} else if (overlay.mozRequestFullScreen) {
			overlay.mozRequestFullScreen();
		}
	}

	function exitFullscreen() {
		if (document.exitFullscreen) {
			document.exitFullscreen();
		} else if (document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if (document.webkitExitFullscreen) {
			document.webkitExitFullscreen();
		}
	}

	function hideOverlay() {
		if (options.noScrollbars) {
			document.documentElement.style.overflowY = 'auto';
			document.body.style.overflowY = 'auto';
		}
		if (overlay.style.display === 'none') {
			return;
		}

		unbind(document, 'keydown', keyDownHandler);
		// Fade out and hide the overlay
		overlay.className = '';
		setTimeout(function () {
			overlay.style.display = 'none';
			if (document.fullscreen) {
				exitFullscreen();
			}
			if (options.bodyClass && document.body.classList) {
				document.body.classList.remove(options.bodyClass);
			}
			if (options.afterHide) {
				options.afterHide();
			}
			documentLastFocus && documentLastFocus.focus();
			isOverlayVisible = false;
		}, 500);
	}

	function loadImage(index, callback) {
		var imageContainer = imagesElements[index];
		var galleryItem = currentGallery[index];

		// Return if the index exceeds prepared images in the overlay
		// or if the current gallery has been changed / closed
		if (typeof imageContainer === 'undefined' || typeof galleryItem === 'undefined') {
			return;
		}

		// If image is already loaded run callback and return
		if (imageContainer.getElementsByTagName('img')[0]) {
			if (callback) {
				callback();
			}
			return;
		}

		// Get element reference, optional caption and source path
		var imageElement = galleryItem.imageElement;
		var thumbnailElement = imageElement.getElementsByTagName('img')[0];
		var imageCaption = typeof options.captions === 'function' ?
			options.captions.call(currentGallery, imageElement) :
			imageElement.getAttribute('data-caption') || imageElement.title;
		var imageSrc = getImageSrc(imageElement);

		// Prepare figure element
		var figure = create('figure');
		figure.id = 'baguetteBox-figure-' + index;
		figure.innerHTML = '<div class="baguetteBox-spinner">' +
			'<div class="baguetteBox-double-bounce1"></div>' +
			'<div class="baguetteBox-double-bounce2"></div>' +
			'</div>';
		// Insert caption if available
		if (options.captions && imageCaption) {
			var figcaption = create('figcaption');
			figcaption.id = 'baguetteBox-figcaption-' + index;
			figcaption.innerHTML = imageCaption;
			figure.appendChild(figcaption);
		}
		imageContainer.appendChild(figure);

		// Prepare gallery img element
		var image = create('img');
		image.onload = function () {
			// Remove loader element
			var spinner = document.querySelector('#baguette-img-' + index + ' .baguetteBox-spinner');
			figure.removeChild(spinner);
			if (!options.async && callback) {
				callback();
			}
		};
		image.setAttribute('src', imageSrc);
		image.alt = thumbnailElement ? thumbnailElement.alt || '' : '';
		if (options.titleTag && imageCaption) {
			image.title = imageCaption;
		}
		figure.appendChild(image);

		// Run callback
		if (options.async && callback) {
			callback();
		}
	}

	// Get image source location, mostly used for responsive images
	function getImageSrc(image) {
		// Set default image path from href
		var result = image.href;
		// If dataset is supported find the most suitable image
		if (image.dataset) {
			var srcs = [];
			// Get all possible image versions depending on the resolution
			for (var item in image.dataset) {
				if (item.substring(0, 3) === 'at-' && !isNaN(item.substring(3))) {
					srcs[item.replace('at-', '')] = image.dataset[item];
				}
			}
			// Sort resolutions ascending
			var keys = Object.keys(srcs).sort(function (a, b) {
				return parseInt(a, 10) < parseInt(b, 10) ? -1 : 1;
			});
			// Get real screen resolution
			var width = window.innerWidth * window.devicePixelRatio;
			// Find the first image bigger than or equal to the current width
			var i = 0;
			while (i < keys.length - 1 && keys[i] < width) {
				i++;
			}
			result = srcs[keys[i]] || result;
		}
		return result;
	}

	// Return false at the right end of the gallery
	function showNextImage() {
		return show(currentIndex + 1);
	}

	// Return false at the left end of the gallery
	function showPreviousImage() {
		return show(currentIndex - 1);
	}

	// Return false at the left end of the gallery
	function showFirstImage(event) {
		if (event) {
			event.preventDefault();
		}
		return show(0);
	}

	// Return false at the right end of the gallery
	function showLastImage(event) {
		if (event) {
			event.preventDefault();
		}
		return show(currentGallery.length - 1);
	}

	/**
	 * Move the gallery to a specific index
	 * @param `index` {number} - the position of the image
	 * @param `gallery` {array} - gallery which should be opened, if omitted assumes the currently opened one
	 * @return {boolean} - true on success or false if the index is invalid
	 */
	function show(index, gallery) {
		if (!isOverlayVisible && index >= 0 && index < gallery.length) {
			prepareOverlay(gallery, options);
			showOverlay(index);
			return true;
		}
		if (index < 0) {
			if (options.animation) {
				bounceAnimation('left');
			}
			return false;
		}
		if (index >= imagesElements.length) {
			if (options.animation) {
				bounceAnimation('right');
			}
			return false;
		}

		currentIndex = index;
		loadImage(currentIndex, function () {
			preloadNext(currentIndex);
			preloadPrev(currentIndex);
		});
		updateOffset();

		if (options.onChange) {
			options.onChange(currentIndex, imagesElements.length);
		}

		return true;
	}

	/**
	 * Triggers the bounce animation
	 * @param {('left'|'right')} direction - Direction of the movement
	 */
	function bounceAnimation(direction) {
		slider.className = 'bounce-from-' + direction;
		setTimeout(function () {
			slider.className = '';
		}, 400);
	}

	function updateOffset() {
		var offset = -currentIndex * 100 + '%';
		if (options.animation === 'fadeIn') {
			slider.style.opacity = 0;
			setTimeout(function () {
				supports.transforms ?
					slider.style.transform = slider.style.webkitTransform = 'translate3d(' + offset + ',0,0)'
					: slider.style.left = offset;
				slider.style.opacity = 1;
			}, 400);
		} else {
			supports.transforms ?
				slider.style.transform = slider.style.webkitTransform = 'translate3d(' + offset + ',0,0)'
				: slider.style.left = offset;
		}
	}

	// CSS 3D Transforms test
	function testTransformsSupport() {
		var div = create('div');
		return typeof div.style.perspective !== 'undefined' || typeof div.style.webkitPerspective !== 'undefined';
	}

	// Inline SVG test
	function testSvgSupport() {
		var div = create('div');
		div.innerHTML = '<svg/>';
		return (div.firstChild && div.firstChild.namespaceURI) === 'http://www.w3.org/2000/svg';
	}

	// Borrowed from https://github.com/seiyria/bootstrap-slider/pull/680/files
	/* eslint-disable getter-return */
	function testPassiveEventsSupport() {
		var passiveEvents = false;
		try {
			var opts = Object.defineProperty({}, 'passive', {
				get: function () {
					passiveEvents = true;
				}
			});
			window.addEventListener('test', null, opts);
		} catch (e) { /* Silence the error and continue */ }

		return passiveEvents;
	}
	/* eslint-enable getter-return */

	function preloadNext(index) {
		if (index - currentIndex >= options.preload) {
			return;
		}
		loadImage(index + 1, function () {
			preloadNext(index + 1);
		});
	}

	function preloadPrev(index) {
		if (currentIndex - index >= options.preload) {
			return;
		}
		loadImage(index - 1, function () {
			preloadPrev(index - 1);
		});
	}

	function bind(element, event, callback, options) {
		if (element.addEventListener) {
			element.addEventListener(event, callback, options);
		} else {
			// IE8 fallback
			element.attachEvent('on' + event, function (event) {
				// `event` and `event.target` are not provided in IE8
				event = event || window.event;
				event.target = event.target || event.srcElement;
				callback(event);
			});
		}
	}

	function unbind(element, event, callback, options) {
		if (element.removeEventListener) {
			element.removeEventListener(event, callback, options);
		} else {
			// IE8 fallback
			element.detachEvent('on' + event, callback);
		}
	}

	function getByID(id) {
		return document.getElementById(id);
	}

	function create(element) {
		return document.createElement(element);
	}

	function destroyPlugin() {
		unbindEvents();
		clearCachedData();
		unbind(document, 'keydown', keyDownHandler);
		document.getElementsByTagName('body')[0].removeChild(document.getElementById('baguetteBox-overlay'));
		data = {};
		currentGallery = [];
		currentIndex = 0;
	}

	return {
		run: run,
		show: show,
		showNext: showNextImage,
		showPrevious: showPreviousImage,
		hide: hideOverlay,
		destroy: destroyPlugin
	};
}));

$(document).ready(function() {
			var isMobile = {Android: function() {return navigator.userAgent.match(/Android/i);},BlackBerry: function() {return navigator.userAgent.match(/BlackBerry/i);},iOS: function() {return navigator.userAgent.match(/iPhone|iPad|iPod/i);},Opera: function() {return navigator.userAgent.match(/Opera Mini/i);},Windows: function() {return navigator.userAgent.match(/IEMobile/i);},any: function() {return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());}};
	if(!isMobile.any()){
		$.each($('.zoom'), function(index, val) {
			$(this).append('<span class="zoom__body"></span><span class="zoom__lens"></span><span class="zoom__big"><span></span></span>');
				var tw=$(this).outerWidth();
				var th=$(this).outerHeight();
				var img=$(this).children('img');
				var src=$(this).attr('href');
				var lens=$(this).find('.zoom__lens');
				var big=$(this).find('.zoom__big');
			big.css({
				top:0,
				height:$(this).parents('.product__column').outerHeight(),
				left:$(this).outerWidth()+20,
				width:$(this).parents('.product__row').find('.product__body').outerWidth()
			});
			big.append('<img src="'+src+'" alt="">');

			$(this).find('.zoom__body').hover(function() {
				$('.product__body').addClass('active');
				$(this).parent().addClass('active');
			}, function() {
				$('.product__body').removeClass('active');
				$(this).parent().removeClass('active');
			});
			$(this).find('.zoom__body').bind('mousemove', function (event) {
				mx = event.pageX-$(this).offset().left;
				my = event.pageY-$(this).offset().top;

				r_x=tw-img.outerWidth();
				r_y=th-img.outerHeight();

				mx_p=mx/(tw+big.outerWidth()+r_x)*100;
				my_p=my/(th+big.outerHeight()+r_y)*100;

				b_x=0-big.find('img').outerWidth()/100*mx_p;
				b_y=0-big.find('img').outerHeight()/100*my_p;

				lens.css({
					top:my,
					left:mx
				});
				big.find('img').css({
					left:b_x,
					top:b_y
				});
			});
		});
	}
	$('.zoom').click(function(event) {
		return false;
	});
});